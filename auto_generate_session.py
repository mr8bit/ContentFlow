#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Telethon —Å–µ—Å—Å–∏–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
"""

import os
import asyncio
from dotenv import load_dotenv
from telethon import TelegramClient
from telethon.sessions import StringSession

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def get_env_vars():
    """–ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    api_id = os.getenv('TELEGRAM_API_ID')
    api_hash = os.getenv('TELEGRAM_API_HASH')
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not api_id or not api_hash or not bot_token:
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_BOT_TOKEN")
    
    return int(api_id), api_hash, bot_token

async def generate_session_string():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –¥–ª—è –±–æ—Ç–∞"""
    try:
        api_id, api_hash, bot_token = get_env_vars()
        
        print("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è Telegram –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
        client = TelegramClient(StringSession(), api_id, api_hash)
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ –±–æ—Ç
        await client.start(bot_token=bot_token)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏
        session_string = client.session.save()
        
        print("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        print(f"\n=== –°—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ ===")
        print(session_string)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open('telethon_session_string.txt', 'w') as f:
            f.write(session_string)
        
        print(f"\nüìÅ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: telethon_session_string.txt")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
        update_env_file(session_string)
        
        await client.disconnect()
        
        return session_string
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        return None

def update_env_file(session_string):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å–µ—Å—Å–∏–∏"""
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env —Ñ–∞–π–ª
        with open('.env', 'r') as f:
            lines = f.readlines()
        
        # –ò—â–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É TELEGRAM_SESSION_STRING
        updated = False
        for i, line in enumerate(lines):
            if line.startswith('TELEGRAM_SESSION_STRING=') or line.startswith('# TELEGRAM_SESSION_STRING='):
                lines[i] = f'TELEGRAM_SESSION_STRING={session_string}\n'
                updated = True
                break
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
        if not updated:
            # –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é Telegram –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –Ω–µ—ë
            for i, line in enumerate(lines):
                if 'TELEGRAM_API_HASH=' in line:
                    lines.insert(i + 1, f'TELEGRAM_SESSION_STRING={session_string}\n')
                    break
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open('.env', 'w') as f:
            f.writelines(lines)
        
        print("‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å–µ—Å—Å–∏–∏")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å .env —Ñ–∞–π–ª: {e}")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –≤—Ä—É—á–Ω—É—é:")
        print(f"TELEGRAM_SESSION_STRING={session_string}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Telethon —Å–µ—Å—Å–∏–∏ ===")
    print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è\n")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        api_id, api_hash, bot_token = get_env_vars()
        print(f"üìã API ID: {api_id}")
        print(f"üìã API Hash: {api_hash[:8]}...")
        print(f"üìã Bot Token: {bot_token[:10]}...\n")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        session_string = asyncio.run(generate_session_string())
        
        if session_string:
            print("\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å worker:")
            print("docker-compose restart worker")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == '__main__':
    exit(main())