#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ –∫–ª–∞—Å—Å—ã –∏ –º–µ—Ç–æ–¥—ã —á—Ç–æ –∏ worker.
"""

import asyncio
import logging
import sys
from datetime import datetime
from telegram_scraper_service import telegram_scraper
from database import SessionLocal
import crud

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def get_channel_posts(channel_identifier: str, limit: int = 50):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
    
    Args:
        channel_identifier: ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @channelname –∏–ª–∏ testchannel)
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)
    """
    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞: {channel_identifier}")
    logger.info(f"üìä –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {limit}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
        if not await telegram_scraper.initialize():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –∫–ª–∏–µ–Ω—Ç")
            return []
        
        logger.info("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
        messages = await telegram_scraper.scrape_channel_history(
            channel_identifier, 
            limit=limit
        )
        
        if not messages:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ {channel_identifier}")
            return []
        
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_identifier}")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        print(f"\nüìã –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_identifier}:")
        print("=" * 80)
        
        for i, msg in enumerate(messages, 1):
            print(f"\nüìå –ü–æ—Å—Ç #{i}")
            print(f"üÜî ID —Å–æ–æ–±—â–µ–Ω–∏—è: {msg.get('message_id', 'N/A')}")
            print(f"üìÖ –î–∞—Ç–∞: {msg.get('date', 'N/A')}")
            print(f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {msg.get('username', 'N/A')} ({msg.get('first_name', '')} {msg.get('last_name', '')})")
            print(f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {msg.get('views', 0)}")
            print(f"üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∏: {msg.get('forwards', 0)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)
            message_text = msg.get('message', '')
            if message_text:
                preview = message_text[:200] + '...' if len(message_text) > 200 else message_text
                print(f"üìù –¢–µ–∫—Å—Ç: {preview}")
            else:
                print("üìù –¢–µ–∫—Å—Ç: [–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞]")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
            if msg.get('media_type'):
                print(f"üñºÔ∏è –ú–µ–¥–∏–∞: {msg.get('media_type')} ({msg.get('media_path', 'N/A')})")
            else:
                print("üñºÔ∏è –ú–µ–¥–∏–∞: –ù–µ—Ç")
            
            print("-" * 40)
        
        return messages
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {str(e)}")
        return []
    
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
        await telegram_scraper.disconnect()
        logger.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


async def list_available_channels():
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        db = SessionLocal()
        channels = crud.get_source_channels(db, active_only=False)
        
        if not channels:
            print("üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            return
        
        print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ({len(channels)}):")
        print("=" * 60)
        
        for i, channel in enumerate(channels, 1):
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if channel.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            print(f"{i}. {channel.channel_name} (@{channel.channel_id}) - {status}")
        
        db.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}")


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞.
    """
    print("ü§ñ –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    await list_available_channels()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(sys.argv) >= 2:
        channel_identifier = sys.argv[1]
        limit = int(sys.argv[2]) if len(sys.argv) >= 3 else 50
    else:
        print("\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("   python get_channel_posts.py <channel_id> [limit]")
        print("\nüìù –ü—Ä–∏–º–µ—Ä—ã:")
        print("   python get_channel_posts.py testhuypizda 20")
        print("   python get_channel_posts.py @channelname 100")
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥
        channel_identifier = input("\nüî§ –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞: ").strip()
        if not channel_identifier:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª")
            return
        
        try:
            limit_input = input("üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50): ").strip()
            limit = int(limit_input) if limit_input else 50
        except ValueError:
            limit = 50
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
    messages = await get_channel_posts(channel_identifier, limit)
    
    if messages:
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)